<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Str;

class GenerateVueI18nTranslations extends Command
{
    protected $signature = 'vue-i18n:generate
                            {--output=resources/js/i18n/locales : Output directory for translation files}';

    protected $description = 'Generate Vue I18n translation files from Laravel language files';

    public function handle()
    {
        $outputPath = $this->option('output');

        $this->generateTranslations($outputPath);
    }

    protected function generateTranslations($outputPath)
    {
        $langPath = base_path('lang');

        if (!File::exists($langPath)) {
            $this->error('Language directory not found: ' . $langPath);
            return;
        }

        $locales = $this->getLocales($langPath);

        if (empty($locales)) {
            $this->warn('No locale directories found in ' . $langPath);
            return;
        }

        foreach ($locales as $locale) {
            $this->processLocale($locale, $langPath, $outputPath);
        }

        $this->info('Vue I18n translation files generated successfully!');
        $this->generateIndexFile($outputPath, $locales);
    }

    protected function getLocales($langPath)
    {
        $locales = [];

        // Get locale directories
        $directories = File::directories($langPath);
        foreach ($directories as $directory) {
            $locales[] = basename($directory);
        }

        return $locales;
    }

    protected function processLocale($locale, $langPath, $outputPath)
    {
        $translations = [];

        // Process PHP translation files
        $localeDir = $langPath . '/' . $locale;
        if (File::exists($localeDir)) {
            $files = File::files($localeDir);

            foreach ($files as $file) {
                if ($file->getExtension() === 'php') {
                    $key = $file->getBasename('.php');
                    $content = include $file->getPathname();

                    if (is_array($content)) {
                        $translations[$key] = $content;
                    }
                }
            }
        }

        $jsonFile = $langPath . '/' . $locale . '.json';
        if (File::exists($jsonFile)) {
            $jsonTranslations = json_decode(File::get($jsonFile), true);
            if ($jsonTranslations) {
                foreach ($jsonTranslations as $key => $value) {
                    $this->setNestedValue($translations, $key, $value);
                }
            }
        }

        if (!empty($translations)) {
            $outputFile = $outputPath . '/' . $locale . '.json';
            File::put($outputFile, json_encode($translations, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
            $this->line("Generated: {$locale}.json");
        }
    }

    protected function setNestedValue(&$array, $key, $value)
    {
        $keys = explode('.', $key);
        $current = &$array;

        foreach ($keys as $k) {
            if (!isset($current[$k])) {
                $current[$k] = [];
            }
            $current = &$current[$k];
        }

        $current = $value;
    }

    protected function generateIndexFile($outputPath, $locales)
    {
        $imports = [];
        $messages = [];

        foreach ($locales as $locale) {
            $imports[] = "import {$locale} from './{$locale}.json'";
            $messages[] = "  {$locale}";
        }

        $indexContent = "// Auto-generated by vue-i18n:generate command\n";
        $indexContent .= "// Generated: ".now()->format('c')." \n";
        $indexContent .= "import { createI18n } from 'vue-i18n'\n\n";
        $indexContent .= implode("\n", $imports) . "\n\n";
        $indexContent .= "const messages = {\n" . implode(",\n", $messages) . "\n}\n\n";
        $indexContent .= "const i18n = createI18n({\n";
        $indexContent .= "  legacy: false,\n";
        $indexContent .= "  locale: '" . (in_array('en', $locales) ? 'en' : $locales[0]) . "',\n";
        $indexContent .= "  fallbackLocale: '" . (in_array('en', $locales) ? 'en' : $locales[0]) . "',\n";
        $indexContent .= "  messages\n";
        $indexContent .= "})\n\n";
        $indexContent .= "export default i18n\n";

        File::put($outputPath . '/index.js', $indexContent);
        $this->info("Generated index.js with " . count($locales) . " locales: " . implode(', ', $locales));
    }
}
