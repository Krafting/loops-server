<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;

class GenerateVueI18nTranslations extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'vue-i18n:generate
                            {--output=resources/js/i18n/locales : Output directory for translation files}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Generate Vue I18n translation files from Laravel language files';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $outputPath = $this->option('output');
        $this->generateTranslations($outputPath);
    }

    /**
     * Generate translation files for all locales.
     *
     * @param  string  $outputPath
     */
    protected function generateTranslations($outputPath)
    {
        $langPath = base_path('lang');

        if (! File::exists($langPath)) {
            $this->error('Language directory not found: '.$langPath);

            return;
        }

        File::ensureDirectoryExists($outputPath);

        $locales = $this->getLocales($langPath);

        if (empty($locales)) {
            $this->warn('No locale directories found in '.$langPath);

            return;
        }

        foreach ($locales as $locale) {
            $this->processLocale($locale, $langPath, $outputPath);
        }

        $this->info('Vue I18n translation files generated successfully! âœ…');
        $this->generateIndexFile($outputPath, $locales);
    }

    /**
     * Get all available locales from the lang directory.
     *
     * @param  string  $langPath
     * @return array
     */
    protected function getLocales($langPath)
    {
        $locales = [];

        $directories = File::directories($langPath);
        foreach ($directories as $directory) {
            $locales[] = basename($directory);
        }

        $jsonFiles = File::files($langPath);
        foreach ($jsonFiles as $file) {
            if ($file->getExtension() === 'json') {
                $locale = $file->getFilenameWithoutExtension();
                if (! in_array($locale, $locales)) {
                    $locales[] = $locale;
                }
            }
        }

        return $locales;
    }

    /**
     * Process all translation files for a given locale.
     *
     * @param  string  $locale
     * @param  string  $langPath
     * @param  string  $outputPath
     */
    protected function processLocale($locale, $langPath, $outputPath)
    {
        $translations = [];

        $localeDir = $langPath.'/'.$locale;
        if (File::isDirectory($localeDir)) {
            $files = File::allFiles($localeDir);

            foreach ($files as $file) {
                if ($file->getExtension() === 'php') {
                    $key = $file->getBasename('.php');
                    $content = include $file->getPathname();

                    if (is_array($content)) {
                        $translations[$key] = $content;
                    }
                }
            }
        }

        $jsonFile = $langPath.'/'.$locale.'.json';
        if (File::exists($jsonFile)) {
            $jsonTranslations = json_decode(File::get($jsonFile), true);
            if (is_array($jsonTranslations)) {
                $translations = array_merge($translations, $jsonTranslations);
            }
        }

        if (! empty($translations)) {
            $this->convertPlaceholders($translations);

            $outputFile = $outputPath.'/'.$locale.'.json';
            File::put($outputFile, json_encode($translations, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
            $this->line("Generated: {$locale}.json");
        }
    }

    /**
     * Recursively convert Laravel-style placeholders to Vue-i18n style.
     *
     * @param  array  &$array  The array of translations to process.
     */
    protected function convertPlaceholders(&$array)
    {
        foreach ($array as &$value) {
            if (is_array($value)) {
                $this->convertPlaceholders($value);
            } elseif (is_string($value)) {
                $value = preg_replace('/(?<!\w):(\w+)/', '{$1}', $value);
            }
        }
    }

    /**
     * Generate the main index.js file to bootstrap Vue I18n.
     *
     * @param  string  $outputPath
     * @param  array  $locales
     */
    protected function generateIndexFile($outputPath, $locales)
    {
        $imports = [];
        $messages = [];

        foreach ($locales as $locale) {
            $imports[] = "import {$locale} from './{$locale}.json'";
            $messages[] = "  {$locale}";
        }

        $defaultLocale = in_array(config('app.locale'), $locales) ? config('app.locale') : ($locales[0] ?? 'en');

        $indexContent = "// Auto-generated by vue-i18n:generate command\n";
        $indexContent .= '// Generated: '.now()->format('c')." \n";
        $indexContent .= "import { createI18n } from 'vue-i18n'\n\n";
        $indexContent .= implode("\n", $imports)."\n\n";
        $indexContent .= "const messages = {\n".implode(",\n", $messages)."\n}\n\n";
        $indexContent .= "const i18n = createI18n({\n";
        $indexContent .= "  legacy: false,\n";
        $indexContent .= "  locale: '{$defaultLocale}',\n";
        $indexContent .= "  fallbackLocale: 'en',\n";
        $indexContent .= "  messages\n";
        $indexContent .= "})\n\n";
        $indexContent .= "export default i18n\n";

        File::put($outputPath.'/index.js', $indexContent);
        $this->info('Generated index.js with '.count($locales).' locales: '.implode(', ', $locales));
    }
}
